1. Breadth First Search (BFS)

import java.util.*;

public class GraphBFS {
    public static List<Integer> bfsTraversal(int V, List<List<Integer>> adj) {
        boolean[] visited = new boolean[V];
        List<Integer> result = new ArrayList<>();
        Queue<Integer> queue = new LinkedList<>();
        visited[0] = true;
        queue.add(0);
        while (!queue.isEmpty()) {
            int node = queue.poll();
            result.add(node);
            for (int neighbor : adj.get(node)) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    queue.add(neighbor);
                }
            }
        }
        return result;
    }
    public static void main(String[] args) {
        List<List<Integer>> adj = new ArrayList<>();
        adj.add(Arrays.asList(1, 2));         
        adj.add(Arrays.asList(0, 2, 3));      
        adj.add(Arrays.asList(0, 1, 4));      
        adj.add(Arrays.asList(1, 4));         
        adj.add(Arrays.asList(2, 3));         
        System.out.println("BFS Traversal: " + bfsTraversal(5, adj));
    }
}
####################################################################################################################
2. Depth First Search (DFS)

import java.util.*;
public class GraphDFS {
    public static void dfs(int node, boolean[] visited, List<List<Integer>> adj, List<Integer> result) {
        visited[node] = true;
        result.add(node);
        for (int neighbor : adj.get(node)) {
            if (!visited[neighbor]) {
                dfs(neighbor, visited, adj, result);
            }
        }
    }
    public static List<Integer> dfsTraversal(int V, List<List<Integer>> adj) {
        boolean[] visited = new boolean[V];
        List<Integer> result = new ArrayList<>();
        dfs(0, visited, adj, result);
        return result;
    }
    public static void main(String[] args) {
        List<List<Integer>> adj = new ArrayList<>();
        adj.add(Arrays.asList(1, 2));             
        adj.add(Arrays.asList(0, 2));             
        adj.add(Arrays.asList(0, 1, 3, 4));       
        adj.add(Arrays.asList(2));                
        adj.add(Arrays.asList(2));                

        System.out.println("DFS Traversal: " + dfsTraversal(5, adj));
    }
}
